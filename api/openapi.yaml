openapi: 3.0.3
info:
  version: 1.0.0
  title: Abacws Data Visualiser
  description: >
    API for the storage and query of IoT data for the Cardiff University Comptuer Science building (Abacws).
  license:
    name: MIT

tags:
  - name: Devices
    description: > 
        Endpoints relating to all devices

  - name: Device Data
    description: > 
        Endpoints relating to the devices current details.

  - name: Device History
    description: > 
        Endpoints relating to the devices historical data

servers:
    - url: ./
      description: >
        Relative url

    - url: https://api.abacws.ggrainger.uk
      description: >
        Production deployment
    
    - url: http://localhost:5000/api
      description: >
        Local development server.

paths:
  /query:
    summary: Advanced query endpoint
    parameters:
      # dataType
      - name: data
        in: query
        description: >
          What type of data we want.
          Can be 'history', 'data', or 'info'.
          Defaults to 'info'
            - Specifying 'history' will return device details and history.
            - Specifying 'data' will return device details and the most recent data entry.
            - Specifying 'info' will return only device details
          
          **NOTE**: *Setting this to history can result in a very large response, use carefully*
        schema:
          type: string
          enum: [ history, data, info ]
      
      # deviceNames
      - name: name
        in: query
        description: >
          The names of the rooms we want.
            - Can be a single value, or a list of comma-delimited values
        schema:
          type: string
          examples:
            - room1
            - room1,room2,room3
        
      # deviceType
      - name: type
        in: query
        required: false
        description: >
          Types of rooms we wish to query.
            - Can be a single value, or a list of comma-delimited values
        schema:
          type: string
          examples: 
            - lecture
            - lecture,office,meeting
      
      # deviceFloor
      - name: floor
        in: query
        required: false
        description: >
          Floors of the rooms we wish to query
            - Can be a single value, or a list of comma-delimited values
        schema:
          type: string
          examples:
            - 1
            - 1,2,3

      # deviceFields
      - name: has
        in: query
        description: >
          The fields we want our request to contain.
            - Devices and data not containing these fields will not be returned.
            - Can be a single value, or a list of comma-delimited values
        schema:
          type: string
          examples:
            - temperature
            - temperature,humidity,light level
      
      - $ref: "#/components/parameters/fromTime"
      - $ref: "#/components/parameters/toTime"
      
    get:
      summary: Advanced query endpoint
      description: >
        # Advanced query endpoint
          Get a filtered list of devices and associated data or history.
          
          Takes a series of get parameters to filter devices and their data.
      tags:
        - Devices
        - Device Data
        - Device History
      responses:
        '200':
          description: >
            ##### OK
              A list of the devices matching the provided parameters was returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/devices"

        '503':
          $ref: "#/components/responses/databaseFailure"

  /devices:
    summary: Device listing endpoint
    
    get:
      summary: Get a list of all devices
      description: >
        # Device listing endpoint
          Returns a list of all devices.
      tags: 
        - Devices
      responses:
        '200':
          description: >
            ##### OK
              List of all devices returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/devices"
        
        '503':
          $ref: "#/components/responses/databaseFailure"

  /devices/{deviceName}:
    summary: Get information about device
    parameters:
      - $ref: "#/components/parameters/deviceName"

    get:
      summary: Get basic info on a device
      description: >
        # Get information about device
          Returns the basic information about a device.
      tags:
        - Devices
      responses:
        '200':
          description: >
            ##### OK
              Device details returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/device"

  /devices/{deviceName}/data:
    summary: Data interaction endpoint
    parameters:
      - $ref: "#/components/parameters/deviceName"
    
    get:
      summary: Get current data for a device
      description: >
        # Data interaction endpoint
          Get the last data entry for the given device
      tags: 
        - Device Data
      responses:
        '200':
          description: >
            ##### OK
              Device data returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/timestampedData"
        
        '404':
          $ref: "#/components/responses/deviceNotFound"
        
        '503':
          $ref: "#/components/responses/databaseFailure"
    
    put:
      summary: Add data to the given device
      description: >
        # Data interaction endpoint
          Adds data to the given device.
          Data should be provided in JSON format using a PUT request.

          A timestamp is added to the data automatically and is not required.

          Units can optionally be provided by providing an object with a `value` and `units` field instead of just a value:

        ## Without units
            {
              temperature: 20
            }

        ## With units
            {
              temperature: {
                value: 20,
                units: "C"
              }
            }
      tags: 
        - Device Data
      security:
        apiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/data"
            example:
              temperature:
                value: 21
                units: Â°C
      responses:
        '202':
          description: >
            ##### OK
              Data added
        
        '404':
          $ref: "#/components/responses/deviceNotFound"
        
        '503':
          $ref: "#/components/responses/databaseFailure"
        
        '403':
          $ref: "#/components/responses/authFailure"

  /devices/{deviceName}/history:
    summary: Historical data endpoint
    parameters:
      - $ref: "#/components/parameters/deviceName"
      - $ref: "#/components/parameters/fromTime"
      - $ref: "#/components/parameters/toTime"

    get:
      summary: Get historical data
      description: >
        # Historical data endpoint
          Get historical data for the specified device.
          
          Optionally, can provide a "from" or "to" parameter to constrain the timeframe for the request.
      tags: 
        - Device History
      responses:
        '200':
          description: >
            ##### OK
              Historical data returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/history"

        
        '404':
          $ref: "#/components/responses/deviceNotFound"
        
        '503':
          $ref: "#/components/responses/databaseFailure"
    
    delete:
      summary: Clear historical data
      description: >
        # Clear historical data
          Deletes all data for the given device
      tags:
        - Device History
      security:
        apiKeyAuth: []
      responses:
        '200':
          description: >
            ##### OK
              Data was clearned
        
        '404':
          $ref: "#/components/responses/deviceNotFound"
        
        '503':
          $ref: "#/components/responses/databaseFailure"

        '403':
          $ref: "#/components/responses/authFailure"

components:
  responses:
    deviceNotFound:
      description: >
        ##### Device not found
          The requested device does not exist in the database.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/error"
          example:
            error: Device does not exist

    databaseFailure:
      description: >
        ##### Unable to access database
          The API was unable to read/write from the database.
          This may mean that the database is unreachable or that the api lacks the permissions to read/write from/to it.
          Check your logs for more information.
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/error"
          example:
            error: Unable to access database

    authFailure:
      description: >
        ##### Auth failure
          The authorisation provided was insufficient for this endpoint.
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/error"
          example:
            error: You do not have permission to access this resource


  parameters:
    deviceName:
      in: path
      name: deviceName
      required: true
      description: >
        Name of the the device you wish to query
      schema:
        type: string
        example: Room-0.01
    
    fromTime:
      in: query
      name: from
      required: false
      description: >
        Defines the start of a date range for history requests.
          - If specified will only allow data points with a time larger than the provided value.
          - Should be formatted in UNIX time.
      schema:
        type: number
    
    toTime:
      in: query
      name: to
      required: false
      description: >
        Defines the end of a date range for history requests.
          - If specified will only allow data points with a time smaller than the provided value.
          - Should be formatted in UNIX time.
      schema:
        type: number


  schemas:
    device:
      type: object
      description: >
        A device represents a real world IoT device with:
            A known location
            A unique name which can be used to identify it.
      required:
        - name
        - type
        - position
      properties:
        name:
          type: string
          description: >
            Unique name of the device
          examples:
            - Room-0.01
        type:
          type: string
          description: >
            The type of sensor
          examples:
            - lecture
            - office
        position:
          $ref: "#/components/schemas/position"
        data:
          $ref: "#/components/schemas/timestampedData"
        history:
          $ref: "#/components/schemas/history"
    
    devices:
      description: >
        A list of devices
      type: array
      items:
        $ref: "#/components/schemas/device"
    
    position:
      type: object
      description: >
        The absolute position of a device in the world
      properties:
        x:
          type: number
        y:
          type: number
        z:
          type: number
    
    timestamp:
      type: integer
      description: UNIX timestamp
      examples:
        - 1647527656

    data:
      type: object
      description: > 
        Data from the database, can have any number of fields as defined by whatever device is providing the data.
      examples:
      - temperature:
          value: 20
          units: Â°C
        boolean value:
          value: true
    
    timestampedData:
      type: object
      description: >
        Data from the database, can have any number of fields.
        Will always include a timestamp field indiciating when this data was provided in UNIX time.
      allOf:
      - $ref: "#/components/schemas/data"
      - type: object
        properties:
            timestamp:
              $ref: "#/components/schemas/timestamp"
                
        examples:
            - timestamp: 1647527656
              temperature:
                value: 20
                units: Â°C
              boolean value:
                value: true
    
    history:
      type: array
      minItems: 0
      items:
        $ref: "#/components/schemas/timestampedData"
    
    error:
      type: object
      description: >
        An error of some description was encountered by the API.
        A summary of this error will be provided as part of the error field.
      properties:
        error:
          type: string
          examples:
          - Not Found
          - Could not read/write from database
  
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key
