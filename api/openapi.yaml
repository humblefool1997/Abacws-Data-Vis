openapi: 3.0.3
info:
  version: 1.0.0
  title: Abacws Data Visualiser
  description: >
    API for the storage and query of IoT data for the Cardiff University Comptuer Science building (Abacws).
  license:
    name: MIT

tags:
  - name: Devices
    description: > 
        Endpoints relating to all devices

  - name: Device Data
    description: > 
        Endpoints relating to the devices current details.

  - name: Device History
    description: > 
        Endpoints relating to the devices historical data

servers:
    - url: /api
      description: >
        Relative url

    - url: https://api.abacws.ggrainger.uk
      description: >
        Production deployment
    
    - url: http://localhost:5000/api
      description: >
        Local development server.

paths:
  /devices:
    summary: Device listing endpoint
    get:
      summary: Get list of all devices
      tags: 
        - Devices
      responses:
        '200':
          description: >
            A list of devices was returned by the API
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/devices"
        
        '503':
          $ref: "#/components/responses/databaseFailure"

  /devices/{deviceName}:
    summary: Get information about device
    parameters:
      - $ref: "#/components/parameters/deviceName"

    get:
      summary: Get basic information about a device
      tags:
        - Devices
      responses:
        '200':
          description: >
            Device details and data was successfully retrieved.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/device"

  /devices/{deviceName}/data:
    summary: Data interaction endpoint for a device
    description: >
        Endpoint for interacting with a given device and it's data
        Takes the unique name of a device as a parameter.
    parameters:
      - $ref: "#/components/parameters/deviceName"
    
    get:
      summary: Get the last data entry for the given device
      tags: 
        - Device Data
      responses:
        '200':
          description: >
            Device details and data was successfully retrieved.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/timestampedData"
        
        '404':
          $ref: "#/components/responses/deviceNotFound"
        
        '503':
          $ref: "#/components/responses/databaseFailure"
    
    put:
      summary: Add data for a device
      description: >
        Insert data into the database for the given device
      tags: 
        - Device Data
      security:
        apiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/data"
            example:
              temperature:
                value: 21
                units: °C
      responses:
        '202':
          description: >
            The data was accepted by the API and will be inserted into the database.
        
        '404':
          $ref: "#/components/responses/deviceNotFound"
        
        '503':
          $ref: "#/components/responses/databaseFailure"
        
        '403':
          $ref: "#/components/responses/authFailure"

  /devices/{deviceName}/history:
    summary: Historical data endpoint.
    description: >
        Endpoint for interacting with the historical data for a given device.
        Takes the unique name of a device as a parameter.
        Optionally, can provide a "from" or "to" parameter to constrain the timeframe for the request.
    parameters:
      - $ref: "#/components/parameters/deviceName"
      - $ref: "#/components/parameters/fromTime"
      - $ref: "#/components/parameters/toTime"

    
    get:
      summary: Get historical data
      description: >
        Get the historical data for the given device.
        If the device does not exist, this method will return a 404 code.
      tags: 
        - Device History
      responses:
        '200':
          description: >
            The data was retreived
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/device"

        
        '404':
          $ref: "#/components/responses/deviceNotFound"
        
        '503':
          $ref: "#/components/responses/databaseFailure"
    
    delete:
      summary: Clear historical data
      description: >
        Clear historical data for a given device
      tags: 
        - Device History
      security:
        apiKeyAuth: []
      responses:
        '200':
          description: >
            The historical data was cleared
        
        '404':
          $ref: "#/components/responses/deviceNotFound"
        
        '503':
          $ref: "#/components/responses/databaseFailure"

        '403':
          $ref: "#/components/responses/authFailure"

components:
  responses:
    deviceNotFound:
      description: >
        The requested device does not exist in the database.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/error"
          example:
            error: Device does not exist

    databaseFailure:
      description: >
        The API was unable to read/write from the database.
        This may mean that the database is unreachable or that the api lacks the permissions to read/write from/to it.
        Check your logs for more information.
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/error"
          example:
            error: Unable to read/write from/to database

    authFailure:
      description: >
        The authorisation provided was insufficient for this endpoint.
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/error"
          example:
            error: You do not have permission to access this resource


  parameters:
    deviceName:
      in: path
      name: deviceName
      required: true
      description: >
        Name of the the device you wish to query
      schema:
        type: string
        example: Room-0.01
    
    fromTime:
      in: query
      name: from
      required: false
      description: >
        Parameter defining the start of a date range for history requests.
        If specified will only allow data points with a time larger than the provided value.
        Should be formatted in UNIX time.
      schema:
        type: number
        example: 1647971257460
    
    toTime:
      in: query
      name: to
      required: false
      description: >
        Parameter defining the end of a date range for history requests.
        If specified will only allow data points with a time smaller than the provided value.
        Should be formatted in UNIX time.
      schema:
        type: number
        example: 1647971257520

    deviceType:
      in: query
      name: type
      required: false
      description: >
        Parameter defining the types of rooms we wish to query.
      schema:
        type: string
        examples: 
          - lecture
          - office

  schemas:
    device:
      type: object
      description: >
        A device represents a real world IoT device with:
            A known location
            A unique name which can be used to identify it.
      required:
        - name
        - type
        - position
      properties:
        name:
          type: string
          description: >
            Unique name of the device
          examples:
            - Room-0.01
        type:
          type: string
          description: >
            The type of sensor
          examples:
            - lecture
            - office
        position:
          $ref: "#/components/schemas/position"
        data:
          $ref: "#/components/schemas/timestampedData"
        history:
          $ref: "#/components/schemas/history"
    
    devices:
      description: >
        A list of devices
      type: array
      items:
        $ref: "#/components/schemas/device"
    
    position:
      type: object
      description: >
        The absolute position of a device in the world
      properties:
        x:
          type: number
        y:
          type: number
        z:
          type: number
    
    timestamp:
      type: number
      description: UNIX timestamp
      examples:
        - 1647527656

    data:
      type: object
      description: > 
        Data from the database, can have any number of fields as defined by whatever device is providing the data.
      examples:
      - temperature:
          value: 20
          units: °C
        boolean value:
          value: true
    
    timestampedData:
      type: object
      description: >
        Data from the database, can have any number of fields.
        Will always include a timestamp field indiciating when this data was provided in UNIX time.
      allOf:
      - $ref: "#/components/schemas/data"
      - type: object
        properties:
            timestamp:
              $ref: "#/components/schemas/timestamp"
                
        examples:
            - timestamp: 1647527656
              temperature:
                value: 20
                units: °C
              boolean value:
                value: true
    
    history:
      type: array
      minItems: 0
      items:
        $ref: "#/components/schemas/timestampedData"
    
    error:
      type: object
      description: >
        An error of some description was encountered by the API.
        A summary of this error will be provided as part of the error field.
      properties:
        error:
          type: string
          examples:
          - Not Found
          - Could not read/write from database
  
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key
